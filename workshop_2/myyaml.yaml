apiVersion: v1
kind: Pod
metadata:
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ""
  creationTimestamp: 2019-02-16T08:16:36Z
  generateName: kube-dns-584df47cd9-
  labels:
    k8s-app: kube-dns
    pod-template-hash: "1408903785"
  name: kube-dns-584df47cd9-8dcps
  namespace: kube-system
  ownerReferences:
  - apiVersion: extensions/v1beta1
    blockOwnerDeletion: true
    controller: true
    kind: ReplicaSet
    name: kube-dns-584df47cd9
    uid: 2d630bf1-31c3-11e9-9029-42010a840236
  resourceVersion: "563"
  selfLink: /api/v1/namespaces/kube-system/pods/kube-dns-584df47cd9-8dcps
  uid: 2d648d28-31c3-11e9-9029-42010a840236
spec:
  containers:
  - args:
    - --domain=cluster.local.
    - --dns-port=10053
    - --config-dir=/kube-dns-config
    - --v=2
    env:
    - name: PROMETHEUS_PORT
      value: "10055"
    image: k8s.gcr.io/k8s-dns-kube-dns-amd64:1.14.10
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: /healthcheck/kubedns
        port: 10054
        scheme: HTTP
      initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: kubedns
    ports:
    - containerPort: 10053
      name: dns-local
      protocol: UDP
    - containerPort: 10053
      name: dns-tcp-local
      protocol: TCP
    - containerPort: 10055
      name: metrics
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /readiness
        port: 8081
        scheme: HTTP
      initialDelaySeconds: 3
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits:
        memory: 170Mi
      requests:
        cpu: 100m
        memory: 70Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /kube-dns-config
      name: kube-dns-config
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-dns-token-cn5mf
      readOnly: true
  - args:
    - -v=2
    - -logtostderr
    - -configDir=/etc/k8s/dns/dnsmasq-nanny
    - -restartDnsmasq=true
    - --
    - -k
    - --cache-size=1000
    - --no-negcache
    - --log-facility=-
    - --server=/cluster.local/127.0.0.1#10053
    - --server=/in-addr.arpa/127.0.0.1#10053
    - --server=/ip6.arpa/127.0.0.1#10053
    image: k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.14.10
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: /healthcheck/dnsmasq
        port: 10054
        scheme: HTTP
      initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: dnsmasq
    ports:
    - containerPort: 53
      name: dns
      protocol: UDP
    - containerPort: 53
      name: dns-tcp
      protocol: TCP
    resources:
      requests:
        cpu: 150m
        memory: 20Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /etc/k8s/dns/dnsmasq-nanny
      name: kube-dns-config
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-dns-token-cn5mf
      readOnly: true
  - args:
    - --v=2
    - --logtostderr
    - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV
    - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV
    image: k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.10
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: /metrics
        port: 10054
        scheme: HTTP
      initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: sidecar
    ports:
    - containerPort: 10054
      name: metrics
      protocol: TCP
    resources:
      requests:
        cpu: 10m
        memory: 20Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-dns-token-cn5mf
      readOnly: true
  - command:
    - /monitor
    - --component=kubedns
    - --target-port=10054
    - --stackdriver-prefix={{ prometheus_to_sd_prefix }}/addons
    - --api-override={{ prometheus_to_sd_endpoint }}
    - --whitelisted-metrics=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits
    - --pod-id=$(POD_NAME)
    - --namespace-id=$(POD_NAMESPACE)
    - --v=2
    env:
    - name: POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    image: gcr.io/google-containers/prometheus-to-sd:v0.2.3
    imagePullPolicy: IfNotPresent
    name: prometheus-to-sd
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-dns-token-cn5mf
      readOnly: true
  dnsPolicy: Default
  nodeName: gke-k8s-cluster-default-pool-692e607f-vg6k
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: kube-dns
  serviceAccountName: kube-dns
  terminationGracePeriodSeconds: 30
  tolerations:
  - key: CriticalAddonsOnly
    operator: Exists
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - configMap:
      defaultMode: 420
      name: kube-dns
      optional: true
    name: kube-dns-config
  - name: kube-dns-token-cn5mf
    secret:
      defaultMode: 420
      secretName: kube-dns-token-cn5mf
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: 2019-02-16T08:17:07Z
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: 2019-02-16T08:17:16Z
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: 2019-02-16T08:17:07Z
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://5af4d800b2ecbe2d2014b40a03dd06753197268c220fdf7857c977fe6ea88a9b
    image: k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.14.10
    imageID: docker-pullable://k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64@sha256:bbb2a290a568125b3b996028958eb773f33b5b87a6b37bf38a28f8b62dddb3c8
    lastState: {}
    name: dnsmasq
    ready: true
    restartCount: 0
    state:
      running:
        startedAt: 2019-02-16T08:17:09Z
  - containerID: docker://a301f77ac4bf9a5e66c9781444700a1ca3949a93a8545efada539c778ba74267
    image: k8s.gcr.io/k8s-dns-kube-dns-amd64:1.14.10
    imageID: docker-pullable://k8s.gcr.io/k8s-dns-kube-dns-amd64@sha256:b99fc3eee2a9f052f7eb4cc00f15eb12fc405fa41019baa2d6b79847ae7284a8
    lastState: {}
    name: kubedns
    ready: true
    restartCount: 0
    state:
      running:
        startedAt: 2019-02-16T08:17:08Z
  - containerID: docker://d318fe0fb0d16e71a217652f3511c4418591fe1f3a3eee15657d117336807509
    image: gcr.io/google-containers/prometheus-to-sd:v0.2.3
    imageID: docker-pullable://gcr.io/google-containers/prometheus-to-sd@sha256:be220ec4a66275442f11d420033c106bb3502a3217a99c806eef3cf9858788a2
    lastState: {}
    name: prometheus-to-sd
    ready: true
    restartCount: 0
    state:
      running:
        startedAt: 2019-02-16T08:17:13Z
  - containerID: docker://df3b83f5a23d1a687e9ca7e376f4400aeb8cbcc6133b15053c16ac9cae258073
    image: k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.10
    imageID: docker-pullable://k8s.gcr.io/k8s-dns-sidecar-amd64@sha256:4f1ab957f87b94a5ec1edc26fae50da2175461f00afecf68940c4aa079bd08a4
    lastState: {}
    name: sidecar
    ready: true
    restartCount: 0
    state:
      running:
        startedAt: 2019-02-16T08:17:09Z
  hostIP: 10.132.0.3
  phase: Running
  podIP: 10.8.1.3
  qosClass: Burstable
  startTime: 2019-02-16T08:17:07Z
